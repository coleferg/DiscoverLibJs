for each package:
    for each other package:
        for each project:
            average the differences in preferences for each project

        React   axios   mongoose    express
Project1  1       0         1           0
Project2  1       1         0           0  
Project3  0       1         1           0
Project4  1       1         1           1
newProj   1                 1

            React   axios   mongoose    express
React       -
axios       2/4     -       
mongoose    2/4     2/4     -
express     1/4     1/4     1/4         -

compare axios to both react and mongoose
axios to react - 2/4
axios to mongoose - 2/4
average for axios = 2/4 
express to react - 1/4
express to mongoose - 1/4
average for express = 1/4
recommend = max(avg) = 


LEFT                        right
children not in cart  AND   cart packages    OR vice versa

children.foreach((child) => {
    Edge.find({$or: { $and { left: child, right: cart}}, { $and { right: child, left: cart}}})
}).then
child: [edges]
edges {} left: child right:react weight: .5}, .5 + .3 + .2 + .1 = 12/15 
child2:  13/15
child3: 2/15
child4: 1/15

each child is a candidate package
child with highest average, is highest recommendation

edges schema
edges.find(package in left, cart-packages in right) (xor vice versa)
    average for each package not in cart r.e. packages in cart
        return highest averages as recommendations


Steps for completion:
precompute: 
for each package:
    for each other package:
        for each project:
            average the differences in preferences for each project

        React   axios   mongoose    express
Project1  1       0         1           0
Project2  1       1         0           0  
Project3  0       1         1           0
Project4  1       1         1           1

